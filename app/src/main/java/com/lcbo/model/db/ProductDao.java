package com.lcbo.model.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT".
*/
public class ProductDao extends AbstractDao<Product, Long> {

    public static final String TABLENAME = "PRODUCT";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property PriceInCents = new Property(2, int.class, "priceInCents", false, "PRICE_IN_CENTS");
        public final static Property PrimaryCategory = new Property(3, String.class, "primaryCategory", false, "PRIMARY_CATEGORY");
        public final static Property SecondaryCategory = new Property(4, String.class, "secondaryCategory", false, "SECONDARY_CATEGORY");
        public final static Property _package = new Property(5, String.class, "_package", false, "_PACKAGE");
        public final static Property ProducerName = new Property(6, String.class, "producerName", false, "PRODUCER_NAME");
        public final static Property ReleasedOn = new Property(7, String.class, "releasedOn", false, "RELEASED_ON");
        public final static Property HasValueAddedPromotion = new Property(8, boolean.class, "hasValueAddedPromotion", false, "HAS_VALUE_ADDED_PROMOTION");
        public final static Property HasLimitedTimeOffer = new Property(9, boolean.class, "hasLimitedTimeOffer", false, "HAS_LIMITED_TIME_OFFER");
        public final static Property HasBonusRewardMiles = new Property(10, boolean.class, "hasBonusRewardMiles", false, "HAS_BONUS_REWARD_MILES");
        public final static Property IsSeasonal = new Property(11, boolean.class, "isSeasonal", false, "IS_SEASONAL");
        public final static Property IsVqa = new Property(12, boolean.class, "isVqa", false, "IS_VQA");
        public final static Property IsOcb = new Property(13, boolean.class, "isOcb", false, "IS_OCB");
        public final static Property IsKosher = new Property(14, boolean.class, "isKosher", false, "IS_KOSHER");
        public final static Property ValueAddedPromotionDescription = new Property(15, String.class, "valueAddedPromotionDescription", false, "VALUE_ADDED_PROMOTION_DESCRIPTION");
        public final static Property Description = new Property(16, String.class, "description", false, "DESCRIPTION");
        public final static Property Origin = new Property(17, String.class, "origin", false, "ORIGIN");
        public final static Property ServingSuggestion = new Property(18, String.class, "servingSuggestion", false, "SERVING_SUGGESTION");
        public final static Property TastingNote = new Property(19, String.class, "tastingNote", false, "TASTING_NOTE");
        public final static Property UpdatedAt = new Property(20, String.class, "updatedAt", false, "UPDATED_AT");
        public final static Property ImageThumbUrl = new Property(21, String.class, "imageThumbUrl", false, "IMAGE_THUMB_URL");
        public final static Property ImageUrl = new Property(22, String.class, "imageUrl", false, "IMAGE_URL");
    }

    private Query<Product> store_ProductsInStoreQuery;

    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY UNIQUE ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PRICE_IN_CENTS\" INTEGER NOT NULL ," + // 2: priceInCents
                "\"PRIMARY_CATEGORY\" TEXT," + // 3: primaryCategory
                "\"SECONDARY_CATEGORY\" TEXT," + // 4: secondaryCategory
                "\"_PACKAGE\" TEXT," + // 5: _package
                "\"PRODUCER_NAME\" TEXT," + // 6: producerName
                "\"RELEASED_ON\" TEXT," + // 7: releasedOn
                "\"HAS_VALUE_ADDED_PROMOTION\" INTEGER NOT NULL ," + // 8: hasValueAddedPromotion
                "\"HAS_LIMITED_TIME_OFFER\" INTEGER NOT NULL ," + // 9: hasLimitedTimeOffer
                "\"HAS_BONUS_REWARD_MILES\" INTEGER NOT NULL ," + // 10: hasBonusRewardMiles
                "\"IS_SEASONAL\" INTEGER NOT NULL ," + // 11: isSeasonal
                "\"IS_VQA\" INTEGER NOT NULL ," + // 12: isVqa
                "\"IS_OCB\" INTEGER NOT NULL ," + // 13: isOcb
                "\"IS_KOSHER\" INTEGER NOT NULL ," + // 14: isKosher
                "\"VALUE_ADDED_PROMOTION_DESCRIPTION\" TEXT," + // 15: valueAddedPromotionDescription
                "\"DESCRIPTION\" TEXT," + // 16: description
                "\"ORIGIN\" TEXT," + // 17: origin
                "\"SERVING_SUGGESTION\" TEXT," + // 18: servingSuggestion
                "\"TASTING_NOTE\" TEXT," + // 19: tastingNote
                "\"UPDATED_AT\" TEXT," + // 20: updatedAt
                "\"IMAGE_THUMB_URL\" TEXT," + // 21: imageThumbUrl
                "\"IMAGE_URL\" TEXT);"); // 22: imageUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getPriceInCents());
 
        String primaryCategory = entity.getPrimaryCategory();
        if (primaryCategory != null) {
            stmt.bindString(4, primaryCategory);
        }
 
        String secondaryCategory = entity.getSecondaryCategory();
        if (secondaryCategory != null) {
            stmt.bindString(5, secondaryCategory);
        }
 
        String _package = entity.get_package();
        if (_package != null) {
            stmt.bindString(6, _package);
        }
 
        String producerName = entity.getProducerName();
        if (producerName != null) {
            stmt.bindString(7, producerName);
        }
 
        String releasedOn = entity.getReleasedOn();
        if (releasedOn != null) {
            stmt.bindString(8, releasedOn);
        }
        stmt.bindLong(9, entity.getHasValueAddedPromotion() ? 1L: 0L);
        stmt.bindLong(10, entity.getHasLimitedTimeOffer() ? 1L: 0L);
        stmt.bindLong(11, entity.getHasBonusRewardMiles() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsSeasonal() ? 1L: 0L);
        stmt.bindLong(13, entity.getIsVqa() ? 1L: 0L);
        stmt.bindLong(14, entity.getIsOcb() ? 1L: 0L);
        stmt.bindLong(15, entity.getIsKosher() ? 1L: 0L);
 
        String valueAddedPromotionDescription = entity.getValueAddedPromotionDescription();
        if (valueAddedPromotionDescription != null) {
            stmt.bindString(16, valueAddedPromotionDescription);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(17, description);
        }
 
        String origin = entity.getOrigin();
        if (origin != null) {
            stmt.bindString(18, origin);
        }
 
        String servingSuggestion = entity.getServingSuggestion();
        if (servingSuggestion != null) {
            stmt.bindString(19, servingSuggestion);
        }
 
        String tastingNote = entity.getTastingNote();
        if (tastingNote != null) {
            stmt.bindString(20, tastingNote);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(21, updatedAt);
        }
 
        String imageThumbUrl = entity.getImageThumbUrl();
        if (imageThumbUrl != null) {
            stmt.bindString(22, imageThumbUrl);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(23, imageUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getPriceInCents());
 
        String primaryCategory = entity.getPrimaryCategory();
        if (primaryCategory != null) {
            stmt.bindString(4, primaryCategory);
        }
 
        String secondaryCategory = entity.getSecondaryCategory();
        if (secondaryCategory != null) {
            stmt.bindString(5, secondaryCategory);
        }
 
        String _package = entity.get_package();
        if (_package != null) {
            stmt.bindString(6, _package);
        }
 
        String producerName = entity.getProducerName();
        if (producerName != null) {
            stmt.bindString(7, producerName);
        }
 
        String releasedOn = entity.getReleasedOn();
        if (releasedOn != null) {
            stmt.bindString(8, releasedOn);
        }
        stmt.bindLong(9, entity.getHasValueAddedPromotion() ? 1L: 0L);
        stmt.bindLong(10, entity.getHasLimitedTimeOffer() ? 1L: 0L);
        stmt.bindLong(11, entity.getHasBonusRewardMiles() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsSeasonal() ? 1L: 0L);
        stmt.bindLong(13, entity.getIsVqa() ? 1L: 0L);
        stmt.bindLong(14, entity.getIsOcb() ? 1L: 0L);
        stmt.bindLong(15, entity.getIsKosher() ? 1L: 0L);
 
        String valueAddedPromotionDescription = entity.getValueAddedPromotionDescription();
        if (valueAddedPromotionDescription != null) {
            stmt.bindString(16, valueAddedPromotionDescription);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(17, description);
        }
 
        String origin = entity.getOrigin();
        if (origin != null) {
            stmt.bindString(18, origin);
        }
 
        String servingSuggestion = entity.getServingSuggestion();
        if (servingSuggestion != null) {
            stmt.bindString(19, servingSuggestion);
        }
 
        String tastingNote = entity.getTastingNote();
        if (tastingNote != null) {
            stmt.bindString(20, tastingNote);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(21, updatedAt);
        }
 
        String imageThumbUrl = entity.getImageThumbUrl();
        if (imageThumbUrl != null) {
            stmt.bindString(22, imageThumbUrl);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(23, imageUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // priceInCents
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // primaryCategory
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // secondaryCategory
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // _package
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // producerName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // releasedOn
            cursor.getShort(offset + 8) != 0, // hasValueAddedPromotion
            cursor.getShort(offset + 9) != 0, // hasLimitedTimeOffer
            cursor.getShort(offset + 10) != 0, // hasBonusRewardMiles
            cursor.getShort(offset + 11) != 0, // isSeasonal
            cursor.getShort(offset + 12) != 0, // isVqa
            cursor.getShort(offset + 13) != 0, // isOcb
            cursor.getShort(offset + 14) != 0, // isKosher
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // valueAddedPromotionDescription
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // description
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // origin
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // servingSuggestion
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // tastingNote
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // updatedAt
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // imageThumbUrl
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // imageUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPriceInCents(cursor.getInt(offset + 2));
        entity.setPrimaryCategory(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSecondaryCategory(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.set_package(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProducerName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReleasedOn(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHasValueAddedPromotion(cursor.getShort(offset + 8) != 0);
        entity.setHasLimitedTimeOffer(cursor.getShort(offset + 9) != 0);
        entity.setHasBonusRewardMiles(cursor.getShort(offset + 10) != 0);
        entity.setIsSeasonal(cursor.getShort(offset + 11) != 0);
        entity.setIsVqa(cursor.getShort(offset + 12) != 0);
        entity.setIsOcb(cursor.getShort(offset + 13) != 0);
        entity.setIsKosher(cursor.getShort(offset + 14) != 0);
        entity.setValueAddedPromotionDescription(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDescription(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setOrigin(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setServingSuggestion(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setTastingNote(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUpdatedAt(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setImageThumbUrl(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setImageUrl(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Product entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Product entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Product entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "productsInStore" to-many relationship of Store. */
    public List<Product> _queryStore_ProductsInStore(Long storeId) {
        synchronized (this) {
            if (store_ProductsInStoreQuery == null) {
                QueryBuilder<Product> queryBuilder = queryBuilder();
                queryBuilder.join(StoreProductRelation.class, StoreProductRelationDao.Properties.ProductId)
                    .where(StoreProductRelationDao.Properties.StoreId.eq(storeId));
                store_ProductsInStoreQuery = queryBuilder.build();
            }
        }
        Query<Product> query = store_ProductsInStoreQuery.forCurrentThread();
        query.setParameter(0, storeId);
        return query.list();
    }

}
